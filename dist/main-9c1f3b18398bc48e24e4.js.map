{"version":3,"file":"main-9c1f3b18398bc48e24e4.js","mappings":";;;;;;;;;;;;;;AAAO;;;;;;UCAP;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACLiC;;;AAGjC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B;AACA,iEAAiE,yCAAO,CAAC,KAAK,WAAW;AACzF;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,2CAA2C,MAAM;AACjD;AACA,2CAA2C,cAAc;;AAEzD,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,e","sources":["webpack://weather-app/./.env","webpack://weather-app/webpack/bootstrap","webpack://weather-app/webpack/runtime/define property getters","webpack://weather-app/webpack/runtime/hasOwnProperty shorthand","webpack://weather-app/webpack/runtime/make namespace object","webpack://weather-app/./src/index.js"],"sourcesContent":["export const API_KEY = \"a867510b102f43ba991173444232803\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\nimport { API_KEY } from \"../.env\"\n\n\n/*\nMODEL\n\nWrite query\nStore data\nExtract relevant info from data\n*/\n\nclass Model {\n    constructor(query) {\n        this.query = query;\n    }\n\n    async getData() {\n        try {\n            const options =  { mode: 'cors'};\n            const response = await fetch(\n                `http://api.weatherapi.com/v1/current.json?key=${API_KEY}&q=${this.query}&aqi=no`,\n                options\n            );\n            const result = await response.json();\n            this.data = result.current;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\n\n/*\nVIEW\n\nDefine UI elements\nGet user input\nRender data\nClear user input\nClear screen\n*/\n\nclass View {\n    constructor() {\n        this.searchBtn = document.getElementById(\"search-btn\");\n        this.searchTxt = document.getElementById(\"search-txt\");\n    }\n\n    get userInput() {\n        return this.searchTxt.value; \n    }\n\n    set currentTemp(currentTemp) {\n        document.getElementById(\"current-temp\").innerText = currentTemp;\n    }\n\n    set currentCity(currentCity) {\n        document.getElementById(\"current-city\").innerText = currentCity;\n    }\n\n    clearUserInput() {\n        this.searchTxt.value = \"\";\n    }\n}\n\n\n/*\nCONTROLLER\n\nGet search input from View\nGet query from Model\nTrigger search\nTrigger result rendering\n*/\n\nclass Controller {\n    constructor(view) {\n        this.view = view;\n    }\n\n    async searchHandler() {\n        const query = this.view.userInput;\n\n        if (query) {\n            this.model = new Model(query);\n            this.view.clearUserInput();\n\n            try {\n                await this.model.getData();\n\n                this.view.currentCity = `${query}`;\n                const currentTempC = this.model.data.temp_c;\n                this.view.currentTemp = `${currentTempC} Â°C`;\n\n            } catch (error) {\n                console.log(error);\n            }\n        }\n    }\n\n    startApp() {\n        this.view.searchBtn.addEventListener(\"click\", (e) => {\n            e.preventDefault();\n            this.searchHandler();\n        })\n    }\n}\n\nconst app = new Controller(new View());\napp.startApp();"],"names":[],"sourceRoot":""}